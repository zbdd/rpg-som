<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAX_RADIUS = 10*obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected];
angle = 360/obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected];
initial_angle = angle;
radius = 0;
rotate = 0;
spawn = true;

ROTATE_SPEED = 18;
//fix fucked rotate speeds
for (i=0;i&lt;100;i++) {
    if (initial_angle / ROTATE_SPEED != round(initial_angle / ROTATE_SPEED))
        ROTATE_SPEED++;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_game_state.game_state == "inventory") {
    key_up =  keyboard_check_pressed(KEY_UP);
    key_down = -keyboard_check_pressed(KEY_DOWN);
    key_left = -keyboard_check_pressed(KEY_LEFT);
    key_right = keyboard_check_pressed(KEY_RIGHT);
    key_cancel = keyboard_check_pressed(KEY_INV);
    key_select = keyboard_check_pressed(KEY_INTERACT);
    
    MAX_RADIUS = 10 + 10 * obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected];
    angle = 360/obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected];
    
    show_debug_message(obj_hero.spell);
    
    //fancy shit to load the menu
    if (spawn == true) {
        if (radius &lt;= 0 &amp;&amp; obj_hero.spell != 0) rotate = round ((angle * obj_hero.spell) % 360);
        
        if (radius &lt; MAX_RADIUS) radius += ROTATE_SPEED/2;
        else if (radius &gt; MAX_RADIUS) radius = MAX_RADIUS;
        
        rotate = round ((rotate + ROTATE_SPEED) % 360);
            
        for (i = 0; i &lt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]; i++) {
            original = angle * i;
            
            spr_x = round(obj_hero.x + radius * cos((original - rotate) * pi / 180));
            spr_y = round(obj_hero.y + radius * sin((original - rotate) * pi / 180));
                   
            if (!instance_exists(obj_inventory.items[obj_inventory.menu_selected, i])) instance_create(spr_x, spr_y, obj_inventory.items[obj_inventory.menu_selected, i]); 
            
            obj_inventory.items[obj_inventory.menu_selected, i].x = spr_x;
            obj_inventory.items[obj_inventory.menu_selected, i].y = spr_y;
        }  
        
        rotate_to = -1;
        if ((angle * obj_hero.spell - rotate) % 360 == 0) rotate_to = 0;   

        if (radius == MAX_RADIUS &amp;&amp; rotate_to == 0) {  
            spawn = false;
        } 
    } else {
        for(i = 0; i &lt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]; i++) {
            original = angle * i;
                                    
            spr_x = obj_hero.x + radius * cos((original - rotate) * pi / 180);
            spr_y = obj_hero.y + radius * sin((original - rotate) * pi / 180);
        
            with(obj_inventory.items[obj_inventory.menu_selected, i]) {
                instance_destroy();
            } 
            instance_create(spr_x, spr_y, obj_inventory.items[obj_inventory.menu_selected, i]);
        }   
        
        with(obj_selected_spell) {
            instance_destroy();       
        }
        instance_create(obj_hero.x+radius,obj_hero.y,obj_selected_spell);
    }
        
    //control menu dial rotating direction
    if (abs(key_left) || key_right) {
        obj_hero.spell += key_left + key_right;
        obj_game_state.game_state = "inventory_rotating";

        if(obj_hero.spell &lt; 0) obj_hero.spell = obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]-1; 
        else if(obj_hero.spell &gt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]-1) obj_hero.spell = 0;    
    }
 
    //control moving between menus
    if (key_up || abs(key_down))  {   
        for (i = 0; i &lt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]; i++) {
            with (obj_inventory.items[obj_inventory.menu_selected, i]) {
                    instance_destroy();
                } 
            with (obj_selected_spell) {
                instance_destroy();
            }
        }
        old_menu = obj_inventory.menu_selected;
        obj_inventory.menu_selected += key_up + key_down;
        spawn = true;
        
        if (obj_inventory.menu_selected &lt; 0) obj_inventory.menu_selected = obj_inventory.MENU_LEVELS-1;
        if (obj_inventory.menu_selected &gt; obj_inventory.MENU_LEVELS-1) obj_inventory.menu_selected = 0;
    }
    
    //leave inventory and delete not required objects
    if (key_cancel || key_select) {
        obj_game_state.game_state = "ego_control";  
        
        for (i = 0; i &lt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]; i++) {
            with (obj_inventory.items[obj_inventory.menu_selected, i]) {
                instance_destroy();
            } 
        }
        with (obj_selected_spell) {
            instance_destroy();
        }
        instance_destroy();
    }
}
//handle the rotating animation
if (obj_game_state.game_state == "inventory_rotating") {

    rotate = round((rotate + ((key_left + key_right) * ROTATE_SPEED)) % 360);

    for (i = 0; i &lt; obj_inventory.TOTAL_ITEMS[obj_inventory.menu_selected]; i++) {
        original = angle * i;
                            
        spr_x = obj_hero.x + radius * cos((original - rotate) * pi / 180);
        spr_y = obj_hero.y + radius * sin((original - rotate) * pi / 180);
                    
        obj_inventory.items[obj_inventory.menu_selected, i].x = spr_x;
        obj_inventory.items[obj_inventory.menu_selected, i].y = spr_y;
    }
        
    if ((abs(rotate) % angle) == 0) {  
        obj_game_state.game_state = "inventory"; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
